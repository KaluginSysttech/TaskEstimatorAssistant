"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞."""

import logging
from typing import Optional

from aiogram import types
from aiogram.filters import Command


logger = logging.getLogger(__name__)


class MessageHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    
    –°–æ–¥–µ—Ä–∂–∏—Ç handlers –¥–ª—è –∫–æ–º–∞–Ω–¥ /start, /help –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """
    
    def __init__(
        self, 
        llm_client: Optional['LLMClient'] = None,
        conversation: Optional['Conversation'] = None
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.
        
        Args:
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            conversation: –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
        """
        self.llm_client = llm_client
        self.conversation = conversation
        logger.info("MessageHandler initialized")
    
    async def handle_start(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"User {user_id} (@{username}) started the bot")
        
        welcome_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ IT –∑–∞–¥–∞—á.</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å –∑–∞–¥–∞—á.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∏ —è –¥–∞–º —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        
        await message.answer(welcome_text, parse_mode="HTML")
        logger.info(f"Sent welcome message to user {user_id}")
    
    async def handle_help(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        logger.info(f"User {user_id} requested help")
        
        help_text = (
            "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, "
            "–∏ —è –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –µ—ë —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<i>\"–°–æ–∑–¥–∞—Ç—å REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π\"</i>"
        )
        
        await message.answer(help_text, parse_mode="HTML")
        logger.info(f"Sent help message to user {user_id}")
    
    async def handle_text(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM.
        
        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.
        –ï—Å–ª–∏ LLM –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ echo —Ä–µ–∂–∏–º–µ.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        text = message.text
        
        logger.info(f"Received message from user {user_id}: {text}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ LLM –∫–ª–∏–µ–Ω—Ç–∞
        if self.llm_client is None:
            # Fallback: echo —Ä–µ–∂–∏–º
            response = f"üìù –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}"
            await message.answer(response)
            logger.info(f"Sent echo response to user {user_id} (LLM not configured)")
            return
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—Å—Ç—å Conversation
            history = []
            if self.conversation:
                history = self.conversation.get_history(user_id)
                logger.info(f"Retrieved history for user {user_id}: {len(history)} messages")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            logger.info(f"Sending user message to LLM")
            response = await self.llm_client.get_response(text, history=history)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            if self.conversation:
                self.conversation.add_message(user_id, "user", text)
                self.conversation.add_message(user_id, "assistant", response)
                logger.info(f"Saved user-assistant pair to history for user {user_id}")
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ (–ª–∏–º–∏—Ç Telegram: 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            if len(response) <= max_length:
                await message.answer(response)
            else:
                # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                parts = []
                while response:
                    if len(response) <= max_length:
                        parts.append(response)
                        break
                    
                    # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
                    split_pos = response.rfind('\n', 0, max_length)
                    if split_pos == -1:
                        # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —Ä–µ–∂–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                        split_pos = response.rfind(' ', 0, max_length)
                    if split_pos == -1:
                        # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Ä–µ–∂–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                        split_pos = max_length
                    
                    parts.append(response[:split_pos])
                    response = response[split_pos:].lstrip()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
                for i, part in enumerate(parts, 1):
                    if len(parts) > 1:
                        prefix = f"[–ß–∞—Å—Ç—å {i}/{len(parts)}]\n\n"
                        await message.answer(prefix + part)
                    else:
                        await message.answer(part)
            
            logger.info(f"Sent LLM response to user {user_id}")
            
        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ LLM
            error_message = (
                "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
            await message.answer(error_message)
            logger.error(f"Failed to get LLM response for user {user_id}: {e}")

