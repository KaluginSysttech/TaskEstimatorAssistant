"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞."""

import logging
from typing import TYPE_CHECKING

from aiogram import types

if TYPE_CHECKING:
    from src.llm.conversation import Conversation
    from src.llm.llm_client import LLMClient

logger = logging.getLogger(__name__)


class MessageHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.

    –°–æ–¥–µ—Ä–∂–∏—Ç handlers –¥–ª—è –∫–æ–º–∞–Ω–¥ /start, /help –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω —Å LLM –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤.
    """

    def __init__(
        self,
        llm_client: "LLMClient",
        conversation: "Conversation",
    ) -> None:
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞.

        Args:
            llm_client: –ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å LLM (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π)
            conversation: –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤ (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ)
        """
        self.llm_client = llm_client
        self.conversation = conversation
        logger.info("MessageHandler initialized")

    def _split_message(self, text: str, max_length: int) -> list[str]:
        """
        –†–∞–∑–±–∏—Ç—å –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram.

        –†–∞–∑–±–∏–≤–∫–∞ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º:
        1. –ü–æ –ø–µ—Ä–µ–Ω–æ—Å—É —Å—Ç—Ä–æ–∫–∏ (\\n)
        2. –ü–æ –ø—Ä–æ–±–µ–ª—É (—Å–ª–æ–≤–∞)
        3. –ü–æ —Å–∏–º–≤–æ–ª–∞–º (–µ—Å–ª–∏ –Ω–µ—Ç –¥—Ä—É–≥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞)

        Args:
            text: –¢–µ–∫—Å—Ç –¥–ª—è —Ä–∞–∑–±–∏–≤–∫–∏
            max_length: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ–¥–Ω–æ–π —á–∞—Å—Ç–∏

        Returns:
            –°–ø–∏—Å–æ–∫ —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏—è

        Examples:
            >>> handler._split_message("Short text", 100)
            ["Short text"]

            >>> handler._split_message("Very long text...", 10)
            ["Very long", "text..."]
        """
        if len(text) <= max_length:
            return [text]

        parts = []
        remaining = text

        while remaining:
            if len(remaining) <= max_length:
                parts.append(remaining)
                break

            # –ò—â–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–µ—Ä–µ–Ω–æ—Å —Å—Ç—Ä–æ–∫–∏ –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ª–∏–º–∏—Ç–∞
            split_pos = remaining.rfind("\n", 0, max_length)
            if split_pos == -1:
                # –ï—Å–ª–∏ –Ω–µ—Ç –ø–µ—Ä–µ–Ω–æ—Å–æ–≤, —Ä–µ–∂–µ–º –ø–æ —Å–ª–æ–≤–∞–º
                split_pos = remaining.rfind(" ", 0, max_length)
            if split_pos == -1:
                # –í –∫—Ä–∞–π–Ω–µ–º —Å–ª—É—á–∞–µ —Ä–µ–∂–µ–º –ø–æ —Å–∏–º–≤–æ–ª–∞–º
                split_pos = max_length

            parts.append(remaining[:split_pos])
            remaining = remaining[split_pos:].lstrip()

        logger.debug(f"Split message into {len(parts)} parts")
        return parts

    async def handle_start(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"

        logger.info(f"User {user_id} (@{username}) started the bot")

        welcome_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ü–µ–Ω–∫–µ –∑–∞–¥–∞—á.</b>\n\n"
            "üéØ <b>–ú–æ—è –∑–∞–¥–∞—á–∞:</b>\n"
            "–ü–æ–º–æ—á—å –≤–∞–º –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n"
            "‚Ä¢ <b>–°–õ–û–ñ–ù–û–°–¢–¨</b> - –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            "‚Ä¢ <b>–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨</b> - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è\n"
            "‚Ä¢ <b>–û–ë–™–ï–ú</b> - —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è\n\n"
            "üí° <b>–ö–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é:</b>\n"
            "–Ø –±—É–¥—É –∑–∞–¥–∞–≤–∞—Ç—å –≤–∞–º –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏ –∑–∞–¥–∞—á–∏.\n"
            "–ú–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Å—É—Ç—å –∑–∞–¥–∞—á–∏ - –≤–∞–∂–Ω–æ –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ –µ—ë —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∞—Ö.\n\n"
            "üìñ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–ø—Ä–∞–≤–∫–∏."
        )

        await message.answer(welcome_text, parse_mode="HTML")
        logger.info(f"Sent welcome message to user {user_id}")

    async def handle_help(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        logger.info(f"User {user_id} requested help")

        help_text = (
            "üìñ <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é</b>\n\n"
            "ü§ñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
            "/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
            "/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "üéØ <b>–ß—Ç–æ —è –æ—Ü–µ–Ω–∏–≤–∞—é:</b>\n"
            "–Ø –ø–æ–º–æ–≥–∞—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–∏ –≤–µ–ª–∏—á–∏–Ω—ã –¥–ª—è –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏:\n"
            "1. <b>–°–õ–û–ñ–ù–û–°–¢–¨</b> - –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n"
            "2. <b>–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨</b> - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ö–æ–¥—ã\n"
            "3. <b>–û–ë–™–ï–ú</b> - —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è\n\n"
            "üí° <b>–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>\n"
            "‚Ä¢ –í—ã –Ω–∞—á–∏–Ω–∞–µ—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –ª—é–±–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–µ\n"
            "‚Ä¢ –Ø –∑–∞–¥–∞—é –≤–∞–º –Ω–∞–≤–æ–¥—è—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –æ –≤–∞—à–µ–º –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏\n"
            "‚Ä¢ –û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –∏—Å—Ö–æ–¥—è –∏–∑ –≤–∞—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∑–∞–¥–∞—á–∏\n"
            "‚Ä¢ –ö–æ–≥–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —è –ø–æ–º–æ–≥—É —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É\n\n"
            "‚ö†Ô∏è <b>–í–∞–∂–Ω–æ:</b>\n"
            "–ú–Ω–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é —Å—É—Ç—å –≤–∞—à–µ–π –∑–∞–¥–∞—á–∏.\n"
            "–Ø –∞–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–º–æ–≥–∞—é —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ü–µ–Ω–∫—É.\n\n"
            "üí¨ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–∏–∞–ª–æ–≥–∞:</b>\n"
            "–Ø –ø–æ–º–Ω—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ø–∞—Ä –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç, –ø–æ—ç—Ç–æ–º—É –¥–∏–∞–ª–æ–≥ –±—É–¥–µ—Ç –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–º.\n\n"
            "üéØ <b>–ü—Ä–∏–º–µ—Ä –¥–∏–∞–ª–æ–≥–∞:</b>\n"
            '–í—ã: "–ú–Ω–µ –Ω—É–∂–Ω–æ –æ—Ü–µ–Ω–∏—Ç—å –∑–∞–¥–∞—á—É"\n'
            '–Ø: "–ù–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω–æ –≤–∞–º, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å?"\n'
            '–í—ã: "–í —Ü–µ–ª–æ–º –ø–æ–Ω—è—Ç–Ω–æ, –Ω–æ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—è—Å–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–æ–≤"\n'
            '–Ø: "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏?" (–∏ —Ç–∞–∫ –¥–∞–ª–µ–µ)'
        )

        await message.answer(help_text, parse_mode="HTML")
        logger.info(f"Sent help message to user {user_id}")

    async def handle_text(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ LLM.

        –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ LLM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—Ç–≤–µ—Ç.

        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        text = message.text

        logger.info(f"Received message from user {user_id}: {text}")

        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = self.conversation.get_history(user_id)
            logger.info(f"Retrieved history for user {user_id}: {len(history)} messages")

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ LLM —Å –∏—Å—Ç–æ—Ä–∏–µ–π
            logger.info("Sending user message to LLM")
            response = await self.llm_client.get_response(text, history=history)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä—É –≤–æ–ø—Ä–æ—Å-–æ—Ç–≤–µ—Ç –≤ –∏—Å—Ç–æ—Ä–∏—é
            self.conversation.add_message(user_id, "user", text)
            self.conversation.add_message(user_id, "assistant", response)
            logger.info(f"Saved user-assistant pair to history for user {user_id}")

            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —á–∞—Å—Ç–∏ (–ª–∏–º–∏—Ç Telegram: 4096 —Å–∏–º–≤–æ–ª–æ–≤)
            max_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å
            parts = self._split_message(response, max_length)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ —á–∞—Å—Ç–∏
            for i, part in enumerate(parts, 1):
                if len(parts) > 1:
                    prefix = f"[–ß–∞—Å—Ç—å {i}/{len(parts)}]\n\n"
                    await message.answer(prefix + part)
                else:
                    await message.answer(part)

            logger.info(f"Sent LLM response to user {user_id}")

        except TimeoutError as e:
            # –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞
            error_message = (
                "‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É –ø–æ–∑–∂–µ."
            )
            await message.answer(error_message)
            logger.error(f"Timeout getting LLM response for user {user_id}: {e}")

        except ConnectionError as e:
            # –û—à–∏–±–∫–∞ —Å–µ—Ç–∏
            error_message = "üåê –ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.answer(error_message)
            logger.error(f"Connection error for user {user_id}: {e}")

        except ValueError as e:
            # Rate limit
            error_message = (
                "‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
            )
            await message.answer(error_message)
            logger.error(f"Rate limit error for user {user_id}: {e}")

        except RuntimeError as e:
            # API –æ—à–∏–±–∫–∏
            error_message = "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.answer(error_message)
            logger.error(f"API error for user {user_id}: {e}")

        except Exception as e:
            # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏
            error_message = "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            await message.answer(error_message)
            logger.error(f"Unexpected error for user {user_id}: {e}", exc_info=True)
