"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ Telegram –±–æ—Ç–∞."""

import logging
from aiogram import types
from aiogram.filters import Command


logger = logging.getLogger(__name__)


class MessageHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞.
    
    –°–æ–¥–µ—Ä–∂–∏—Ç handlers –¥–ª—è –∫–æ–º–∞–Ω–¥ /start, /help –∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.
    –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Ä–µ–∂–∏–º–µ echo (–¥—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è).
    """
    
    async def handle_start(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        username = message.from_user.username or "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        
        logger.info(f"User {user_id} (@{username}) started the bot")
        
        welcome_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –æ—Ü–µ–Ω–∫–∏ IT –∑–∞–¥–∞—á.</b>\n\n"
            "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –æ—Ü–µ–Ω–∏—Ç—å —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å –∑–∞–¥–∞—á.\n\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, –∏ —è –¥–∞–º —Å–≤–æ—é –æ—Ü–µ–Ω–∫—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )
        
        await message.answer(welcome_text, parse_mode="HTML")
        logger.info(f"Sent welcome message to user {user_id}")
    
    async def handle_help(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        logger.info(f"User {user_id} requested help")
        
        help_text = (
            "üìñ <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n"
            "<b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è:</b>\n"
            "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏, "
            "–∏ —è –ø–æ–º–æ–≥—É –æ—Ü–µ–Ω–∏—Ç—å –µ—ë —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∏ —Ç—Ä—É–¥–æ—ë–º–∫–æ—Å—Ç—å.\n\n"
            "<b>–ü—Ä–∏–º–µ—Ä:</b>\n"
            "<i>\"–°–æ–∑–¥–∞—Ç—å REST API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π\"</i>"
        )
        
        await message.answer(help_text, parse_mode="HTML")
        logger.info(f"Sent help message to user {user_id}")
    
    async def handle_text(self, message: types.Message) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (echo —Ä–µ–∂–∏–º).
        
        –í —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ –¥—É–±–ª–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        –í —Å–ª–µ–¥—É—é—â–∏—Ö –∏—Ç–µ—Ä–∞—Ü–∏—è—Ö –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ LLM.
        
        Args:
            message: –í—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        user_id = message.from_user.id
        text = message.text
        
        logger.info(f"Received message from user {user_id}: {text}")
        
        # Echo —Ä–µ–∂–∏–º - –¥—É–±–ª–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"üìù –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏: {text}"
        
        await message.answer(response)
        logger.info(f"Sent echo response to user {user_id}")

