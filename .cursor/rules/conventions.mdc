---
alwaysApply: true
---
## Правила кодирования

### Обязательно
- ✅ **Type hints** - строгая типизация всех параметров и возвращаемых значений
- ✅ **Docstrings** - для всех классов и публичных методов
- ✅ **Явное > неявного** - никаких неочевидных магических решений
- ✅ **Минимум абстракций** - прямолинейный код

### Запрещено
- ❌ Сложные паттерны проектирования
- ❌ Излишняя абстракция и многослойность
- ❌ Преждевременная оптимизация
- ❌ Умный код в ущерб читаемости

---

## Структура кода

### Организация
```
src/
├── bot/           # TelegramBot, MessageHandler
├── llm/           # LLMClient, Conversation
├── config/        # Settings
└── main.py        # Точка входа
```

### Импорты
- Стандартная библиотека → внешние пакеты → локальные модули
- Абсолютные импорты от корня `src/`

### Naming
- Классы: `PascalCase`
- Функции/методы: `snake_case`
- Константы: `UPPER_SNAKE_CASE`
- Приватные: префикс `_`

---

## Технологии

### Управление проектом (обязательно)
- **uv** - управление зависимостями и виртуальным окружением (pyproject.toml)
- **make** - автоматизация задач (setup, run, clean)

### Используем
- Python 3.x (системная версия)
- aiogram 3.x (polling)
- openai (для OpenRouter)
- pydantic (валидация)
- python-dotenv (конфигурация)
- logging (стандартный)

### НЕ используем
- ❌ Базы данных (только in-memory)
- ❌ Redis/кэширование
- ❌ Docker (пока)
- ❌ Сложные фреймворки
- ❌ Системы мониторинга

---

## Обработка ошибок

### Подход
- Логирование с правильным уровнем (INFO/WARNING/ERROR)
- Понятные сообщения пользователю
- Никаких try-except "на всякий случай"

### Логирование
- INFO: старт/стоп, сообщения пользователей, успешные операции
- WARNING: достижение лимитов, медленные операции
- ERROR: API ошибки, таймауты, сбои конфигурации
- ❌ НЕ логируем токены и API ключи

---

## Конфигурация

### .env файл
- Обязательные: `TELEGRAM_BOT_TOKEN`, `OPENROUTER_API_KEY`
- Опциональные: с дефолтными значениями
- Валидация через Pydantic Settings
- Fail-fast при отсутствии обязательных

### Системный промпт
- Hardcode в коде (не в .env)
- Простой и понятный текст

---

## Что НЕ делать

- ❌ Unit-тесты (пока, после проверки идеи)
- ❌ Сложная архитектура
- ❌ Абстрактные фабрики и билдеры
- ❌ Middleware и декораторы "на всякий случай"
- ❌ Персистентность данных (in-memory для MVP)
- ❌ Преждевременное масштабирование

---

## Чеклист при генерации кода

1. ✅ Type hints на всех параметрах и возвратах
2. ✅ Docstring для класса и публичных методов
3. ✅ 1 класс = 1 файл
4. ✅ Простое и понятное решение
5. ✅ Логирование важных операций
6. ✅ Обработка ошибок с понятными сообщениями
7. ✅ Код читается как книга
8. ❌ Нет лишних абстракций
9. ❌ Нет сложных паттернов
10. ❌ Нет оверинжиниринга

---

**Принцип**: Код должен быть настолько прост, что его сможет понять и поддержать любой разработчик без документации.
