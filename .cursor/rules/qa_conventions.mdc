---
alwaysApply: true
---

# QA Conventions for TDD

## –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

- **TDD —Ü–∏–∫–ª**: Red ‚Üí Green ‚Üí Refactor. –¢–µ—Å—Ç –ø–∏—à–µ—Ç—Å—è –î–û —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- **–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª**: –ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ—Ç—Ç–µ—Ä—ã, —Å–µ—Ç—Ç–µ—Ä—ã, —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–π –∫–æ–¥
- **KISS**: –û–¥–∏–Ω —Ç–µ—Å—Ç = –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞. –ü—Ä–æ—Å—Ç—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã
- **DRY**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fixtures –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –ª–æ–≥–∏–∫–∏, –Ω–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∏—Ç—å setup –∫–æ–¥

## –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å

‚úÖ **–î–ê**:
- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –ª–∏–º–∏—Ç—ã, –æ—à–∏–±–∫–∏)
- –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏ (—é–∑–µ—Ä—ã, —Å–µ—Å—Å–∏–∏)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (API, –ë–î) - –º–æ–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
- –ö—Ä–∏—Ç–∏—á–Ω—ã–µ state changes

‚ùå **–ù–ï–¢**:
- –¢—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã/—Å–µ—Ç—Ç–µ—Ä—ã
- –ö–æ–¥ –±–∏–±–ª–∏–æ—Ç–µ–∫ (pytest, aiogram –∏ —Ç.–¥.)
- –û—á–µ–≤–∏–¥–Ω—ã–µ –≤–µ—â–∏ –±–µ–∑ –ª–æ–≥–∏–∫–∏
- 100% –ø–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞–¥–∏ –ø–æ–∫—Ä—ã—Ç–∏—è

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

```python
def test_feature_scenario() -> None:
    """–û–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ."""
    # Arrange: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    obj = MyClass(key_param=value)
    
    # Act: –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
    result = obj.do_something(input_data)
    
    # Assert: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    assert result == expected
```

## Naming

- `test_<feature>_<scenario>`: `test_history_limit`, `test_clear_nonexistent_user`
- –§–∞–π–ª—ã: `test_<module>.py` —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç `src/<module>.py`
- –ö—Ä–∞—Ç–∫–∏–µ docstrings –Ω–∞ —Ä—É—Å—Å–∫–æ–º: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –∑–∞—á–µ–º

## Fixtures (conftest.py)

- –û–±—â–∏–µ setup/teardown –¥–ª—è –º–æ–¥—É–ª—è
- –ú–æ–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (LLM API, Telegram API)
- –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ 3+ —Ç–µ—Å—Ç–∞—Ö
- **–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å** —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

## Async —Ç–µ—Å—Ç—ã

```python
async def test_async_feature() -> None:
    """–û–ø–∏—Å–∞–Ω–∏–µ async —Ç–µ—Å—Ç–∞."""
    result = await async_function()
    assert result is not None
```

Pytest-asyncio –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ `pyproject.toml`, –Ω–µ –Ω—É–∂–Ω—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã.

## –ú–æ–∫–∏

- –ú–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: API, –ë–î, —Ñ–∞–π–ª—ã, —Å–µ—Ç—å
- –ù–µ –º–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥ - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
- `unittest.mock.patch` –¥–ª—è monkey-patching –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤

## –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

```python
@pytest.mark.parametrize("input,expected", [
    ([], 0),
    ([1], 1),
    ([1, 2, 3], 6),
])
def test_sum_cases(input: list[int], expected: int) -> None:
    assert sum(input) == expected
```

## Type hints

- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
- `-> None` –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ mypy strict mode –∏–∑ `pyproject.toml`

## Assertions

- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π `assert`, –Ω–µ `self.assertEqual`
- –û–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏—è: —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
- –Ø–≤–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: `assert len(items) == 0`, –Ω–µ `assert not items`

## –ò—Å–∫–ª—é—á–µ–Ω–∏—è

```python
def test_invalid_input_raises() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ."""
    with pytest.raises(ValueError, match="Invalid"):
        process_invalid_data()
```

## –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å

- ‚ùå –¢–µ—Å—Ç–æ–≤ –±–µ–∑ assert
- ‚ùå –¢–µ—Å—Ç–æ–≤ "–¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è" –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
- ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ production –∫–æ–¥–∞ –≤ —Ç–µ—Å—Ç–µ
- ‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö assert –¥–ª—è –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ç–µ—Å—Ç—ã
- ‚ùå Hardcoded –∑–Ω–∞—á–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã/fixtures
- ‚ùå –¢–µ—Å—Ç–æ–≤, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

## –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è

```
tests/
‚îú‚îÄ‚îÄ conftest.py           # –û–±—â–∏–µ fixtures
‚îú‚îÄ‚îÄ test_conversation.py  # –¢–µ—Å—Ç—ã –¥–ª—è src/llm/conversation.py
‚îú‚îÄ‚îÄ test_settings.py      # –¢–µ—Å—Ç—ã –¥–ª—è src/config/settings.py
‚îî‚îÄ‚îÄ test_bot.py          # –¢–µ—Å—Ç—ã –¥–ª—è src/bot/*
```

## –ó–∞–ø—É—Å–∫

- `pytest` - –≤—Å–µ —Ç–µ—Å—Ç—ã
- `pytest tests/test_specific.py` - –æ–¥–∏–Ω —Ñ–∞–π–ª
- `pytest -k test_name` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
- `pytest -v` - verbose output
- `pytest --cov=src` - –ø–æ–∫—Ä—ã—Ç–∏–µ (–Ω–µ —Ü–µ–ª—å, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)

## Red flags –ø—Ä–∏ —Ä–µ–≤—å—é

üö© –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç trivial –∫–æ–¥ –±–µ–∑ –ª–æ–≥–∏–∫–∏
üö© –¢–µ—Å—Ç > 20 —Å—Ç—Ä–æ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π)
üö© –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sleep/time.time() (–Ω–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
üö© –¢–µ—Å—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ cleanup
üö© –ù–µ—Ç docstring —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏

## TDD Workflow

1. **Red**: –ù–∞–ø–∏—Å–∞—Ç—å failing —Ç–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∏—á–∏
2. **Green**: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
3. **Refactor**: –£–ª—É—á—à–∏—Ç—å –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
4. –ö–æ–º–º–∏—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ
5. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å refactor —Ñ–∞–∑—É
# QA Conventions for TDD

## –û–±—â–∏–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã

- **TDD —Ü–∏–∫–ª**: Red ‚Üí Green ‚Üí Refactor. –¢–µ—Å—Ç –ø–∏—à–µ—Ç—Å—è –î–û —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏
- **–¢–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª**: –ù–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–µ—Ç—Ç–µ—Ä—ã, —Å–µ—Ç—Ç–µ—Ä—ã, —Ç—Ä–∏–≤–∏–∞–ª—å–Ω—ã–π –∫–æ–¥
- **KISS**: –û–¥–∏–Ω —Ç–µ—Å—Ç = –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞. –ü—Ä–æ—Å—Ç—ã–µ, –ø–æ–Ω—è—Ç–Ω—ã–µ —Ç–µ—Å—Ç—ã
- **DRY**: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fixtures –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –ª–æ–≥–∏–∫–∏, –Ω–µ –∫–æ–ø–∏–ø–∞—Å—Ç–∏—Ç—å setup –∫–æ–¥

## –ß—Ç–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å

‚úÖ **–î–ê**:
- –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞ –∏ –∞–ª–≥–æ—Ä–∏—Ç–º—ã
- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤ (–ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ, –ª–∏–º–∏—Ç—ã, –æ—à–∏–±–∫–∏)
- –ò–∑–æ–ª—è—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –º–µ–∂–¥—É —Å—É—â–Ω–æ—Å—Ç—è–º–∏ (—é–∑–µ—Ä—ã, —Å–µ—Å—Å–∏–∏)
- –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–æ—á–∫–∏ (API, –ë–î) - –º–æ–∫–∏ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã
- –ö—Ä–∏—Ç–∏—á–Ω—ã–µ state changes

‚ùå **–ù–ï–¢**:
- –¢—Ä–∏–≤–∏–∞–ª—å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã/—Å–µ—Ç—Ç–µ—Ä—ã
- –ö–æ–¥ –±–∏–±–ª–∏–æ—Ç–µ–∫ (pytest, aiogram –∏ —Ç.–¥.)
- –û—á–µ–≤–∏–¥–Ω—ã–µ –≤–µ—â–∏ –±–µ–∑ –ª–æ–≥–∏–∫–∏
- 100% –ø–æ–∫—Ä—ã—Ç–∏–µ —Ä–∞–¥–∏ –ø–æ–∫—Ä—ã—Ç–∏—è

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–µ—Å—Ç–æ–≤

```python
def test_feature_scenario() -> None:
    """–û–ø–∏—Å–∞–Ω–∏–µ: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ø–æ—á–µ–º—É –≤–∞–∂–Ω–æ."""
    # Arrange: –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    obj = MyClass(key_param=value)
    
    # Act: –æ–¥–Ω–æ –¥–µ–π—Å—Ç–≤–∏–µ
    result = obj.do_something(input_data)
    
    # Assert: –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–∂–∏–¥–∞–µ–º–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    assert result == expected
```

## Naming

- `test_<feature>_<scenario>`: `test_history_limit`, `test_clear_nonexistent_user`
- –§–∞–π–ª—ã: `test_<module>.py` —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç `src/<module>.py`
- –ö—Ä–∞—Ç–∫–∏–µ docstrings –Ω–∞ —Ä—É—Å—Å–∫–æ–º: —á—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è, –∑–∞—á–µ–º

## Fixtures (conftest.py)

- –û–±—â–∏–µ setup/teardown –¥–ª—è –º–æ–¥—É–ª—è
- –ú–æ–∫–∏ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π (LLM API, Telegram API)
- –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –≤ 3+ —Ç–µ—Å—Ç–∞—Ö
- **–ù–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å** —Ñ–∏–∫—Å—Ç—É—Ä—ã –¥–ª—è –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö

## Async —Ç–µ—Å—Ç—ã

```python
async def test_async_feature() -> None:
    """–û–ø–∏—Å–∞–Ω–∏–µ async —Ç–µ—Å—Ç–∞."""
    result = await async_function()
    assert result is not None
```

Pytest-asyncio –Ω–∞—Å—Ç—Ä–æ–µ–Ω –≤ `pyproject.toml`, –Ω–µ –Ω—É–∂–Ω—ã –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä—ã.

## –ú–æ–∫–∏

- –ú–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–Ω–µ—à–Ω–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: API, –ë–î, —Ñ–∞–π–ª—ã, —Å–µ—Ç—å
- –ù–µ –º–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–π –∫–æ–¥ - —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ
- `unittest.mock.patch` –¥–ª—è monkey-patching –≤–Ω–µ—à–Ω–∏—Ö –≤—ã–∑–æ–≤–æ–≤

## –ü–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–∞—Ü–∏—è

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:

```python
@pytest.mark.parametrize("input,expected", [
    ([], 0),
    ([1], 1),
    ([1, 2, 3], 6),
])
def test_sum_cases(input: list[int], expected: int) -> None:
    assert sum(input) == expected
```

## Type hints

- –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã –¥–ª—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
- `-> None` –¥–ª—è —Ç–µ—Å—Ç–æ–≤ –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞
- –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ mypy strict mode –∏–∑ `pyproject.toml`

## Assertions

- –ò—Å–ø–æ–ª—å–∑—É–π —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π `assert`, –Ω–µ `self.assertEqual`
- –û–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–µ—Å—Ç (–∏—Å–∫–ª—é—á–µ–Ω–∏—è: —Å–≤—è–∑–∞–Ω–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–¥–Ω–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞)
- –Ø–≤–Ω—ã–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è: `assert len(items) == 0`, –Ω–µ `assert not items`

## –ò—Å–∫–ª—é—á–µ–Ω–∏—è

```python
def test_invalid_input_raises() -> None:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥ –≤—ã–∑—ã–≤–∞–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω–∏–µ."""
    with pytest.raises(ValueError, match="Invalid"):
        process_invalid_data()
```

## –ß–µ–≥–æ –∏–∑–±–µ–≥–∞—Ç—å

- ‚ùå –¢–µ—Å—Ç–æ–≤ –±–µ–∑ assert
- ‚ùå –¢–µ—Å—Ç–æ–≤ "–¥–ª—è –ø–æ–∫—Ä—ã—Ç–∏—è" –±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
- ‚ùå –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ª–æ–≥–∏–∫–∏ –∏–∑ production –∫–æ–¥–∞ –≤ —Ç–µ—Å—Ç–µ
- ‚ùå –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö assert –¥–ª—è –Ω–µ—Å–≤—è–∑–∞–Ω–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ - —Ä–∞–∑–±–∏—Ç—å –Ω–∞ —Ç–µ—Å—Ç—ã
- ‚ùå Hardcoded –∑–Ω–∞—á–µ–Ω–∏–π - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã/fixtures
- ‚ùå –¢–µ—Å—Ç–æ–≤, –∑–∞–≤–∏—Å—è—â–∏—Ö –æ—Ç –ø–æ—Ä—è–¥–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è

## –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è

```
tests/
‚îú‚îÄ‚îÄ conftest.py           # –û–±—â–∏–µ fixtures
‚îú‚îÄ‚îÄ test_conversation.py  # –¢–µ—Å—Ç—ã –¥–ª—è src/llm/conversation.py
‚îú‚îÄ‚îÄ test_settings.py      # –¢–µ—Å—Ç—ã –¥–ª—è src/config/settings.py
‚îî‚îÄ‚îÄ test_bot.py          # –¢–µ—Å—Ç—ã –¥–ª—è src/bot/*
```

## –ó–∞–ø—É—Å–∫

- `pytest` - –≤—Å–µ —Ç–µ—Å—Ç—ã
- `pytest tests/test_specific.py` - –æ–¥–∏–Ω —Ñ–∞–π–ª
- `pytest -k test_name` - –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç
- `pytest -v` - verbose output
- `pytest --cov=src` - –ø–æ–∫—Ä—ã—Ç–∏–µ (–Ω–µ —Ü–µ–ª—å, –Ω–æ –ø–æ–ª–µ–∑–Ω—ã–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)

## Red flags –ø—Ä–∏ —Ä–µ–≤—å—é

üö© –¢–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç trivial –∫–æ–¥ –±–µ–∑ –ª–æ–≥–∏–∫–∏
üö© –¢–µ—Å—Ç > 20 —Å—Ç—Ä–æ–∫ (–≤–æ–∑–º–æ–∂–Ω–æ, —Å–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π)
üö© –¢–µ—Å—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç sleep/time.time() (–Ω–µ –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
üö© –¢–µ—Å—Ç –º–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–µ–∑ cleanup
üö© –ù–µ—Ç docstring —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º –ø—Ä–æ–≤–µ—Ä–∫–∏

## TDD Workflow

1. **Red**: –ù–∞–ø–∏—Å–∞—Ç—å failing —Ç–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–π —Ñ–∏—á–∏
2. **Green**: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∫–æ–¥ –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
3. **Refactor**: –£–ª—É—á—à–∏—Ç—å –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏
4. –ö–æ–º–º–∏—Ç–∏—Ç—å —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –≤—Å–µ —Ç–µ—Å—Ç—ã –∑–µ–ª–µ–Ω—ã–µ
5. –ù–µ –ø—Ä–æ–ø—É—Å–∫–∞—Ç—å refactor —Ñ–∞–∑—É
