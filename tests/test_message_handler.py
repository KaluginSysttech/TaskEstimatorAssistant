"""–¢–µ—Å—Ç—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π."""

from unittest.mock import AsyncMock, MagicMock

import pytest

from bot.message_handler import MessageHandler


@pytest.fixture
def mock_llm_client() -> MagicMock:
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –º–æ–∫ LLM –∫–ª–∏–µ–Ω—Ç–∞."""
    client = MagicMock()
    client.system_prompt = (
        "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –æ—Ü–µ–Ω–∫–µ –∑–∞–¥–∞—á. "
        "–¢–≤–æ—è —Ä–æ–ª—å - –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç—Ä–∏ –∫–ª—é—á–µ–≤—ã–µ –≤–µ–ª–∏—á–∏–Ω—ã –¥–ª—è –∑–∞–¥–∞—á–∏:\n"
        "1. –°–õ–û–ñ–ù–û–°–¢–¨ - –Ω–∞—Å–∫–æ–ª—å–∫–æ –∑–∞–¥–∞—á–∞ —Å–ª–æ–∂–Ω–∞ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏\n"
        "2. –ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨ - –Ω–∞—Å–∫–æ–ª—å–∫–æ –ø–æ–Ω—è—Ç–Ω—ã —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏ –ø–æ–¥—Ö–æ–¥—ã –∫ —Ä–µ—à–µ–Ω–∏—é\n"
        "3. –û–ë–™–ï–ú - —Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è"
    )
    return client


@pytest.fixture
def mock_conversation() -> MagicMock:
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å –º–æ–∫ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –¥–∏–∞–ª–æ–≥–æ–≤."""
    return MagicMock()


@pytest.fixture
def message_handler(mock_llm_client: MagicMock, mock_conversation: MagicMock) -> MessageHandler:
    """–§–∏–∫—Å—Ç—É—Ä–∞ —Å MessageHandler."""
    return MessageHandler(llm_client=mock_llm_client, conversation=mock_conversation)


async def test_handle_role_displays_prompt(message_handler: MessageHandler) -> None:
    """–¢–µ—Å—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–æ–ª–∏ –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –∫–æ–º–∞–Ω–¥–æ–π /role."""
    # Arrange: —Å–æ–∑–¥–∞–µ–º –º–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏—è
    message = AsyncMock()
    message.from_user = MagicMock(id=123, username="testuser")
    message.answer = AsyncMock()

    # Act: –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await message_handler.handle_role(message)

    # Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –æ—Ç–≤–µ—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–æ–ª–∏
    message.answer.assert_called_once()
    call_args = message.answer.call_args
    response_text = call_args[0][0]

    assert "üé≠" in response_text
    assert "–ú–æ—è —Ä–æ–ª—å" in response_text or "—Ä–æ–ª—å" in response_text.lower()
    assert "–æ—Ü–µ–Ω–∫" in response_text.lower()


async def test_handle_role_contains_key_info(message_handler: MessageHandler) -> None:
    """–¢–µ—Å—Ç —á—Ç–æ /role —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞."""
    # Arrange
    message = AsyncMock()
    message.from_user = MagicMock(id=123, username="testuser")
    message.answer = AsyncMock()

    # Act
    await message_handler.handle_role(message)

    # Assert
    call_args = message.answer.call_args
    response_text = call_args[0][0]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –≤ –æ—Ç–≤–µ—Ç–µ –µ—Å—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ç—Ä–µ—Ö –≤–µ–ª–∏—á–∏–Ω
    assert "–°–õ–û–ñ–ù–û–°–¢–¨" in response_text or "—Å–ª–æ–∂–Ω–æ—Å—Ç" in response_text.lower()
    assert "–ù–ï–û–ü–†–ï–î–ï–õ–ï–ù–ù–û–°–¢–¨" in response_text or "–Ω–µ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ—Å—Ç" in response_text.lower()
    assert "–û–ë–™–ï–ú" in response_text or "–æ–±—ä–µ–º" in response_text.lower()


async def test_handle_role_without_user(message_handler: MessageHandler) -> None:
    """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ /role –±–µ–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ."""
    # Arrange: —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ from_user
    message = AsyncMock()
    message.from_user = None
    message.answer = AsyncMock()

    # Act: –≤—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    await message_handler.handle_role(message)

    # Assert: –æ—Ç–≤–µ—Ç –Ω–µ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    message.answer.assert_not_called()


async def test_handle_role_uses_html_parse_mode(message_handler: MessageHandler) -> None:
    """–¢–µ—Å—Ç —á—Ç–æ /role –∏—Å–ø–æ–ª—å–∑—É–µ—Ç HTML —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ."""
    # Arrange
    message = AsyncMock()
    message.from_user = MagicMock(id=123, username="testuser")
    message.answer = AsyncMock()

    # Act
    await message_handler.handle_role(message)

    # Assert: –ø—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è parse_mode="HTML"
    message.answer.assert_called_once()
    call_kwargs = message.answer.call_args[1]
    assert call_kwargs.get("parse_mode") == "HTML"
